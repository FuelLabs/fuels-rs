diff --git a/packages/fuels-signers/src/wallet.rs b/packages/fuels-signers/src/wallet.rs
index 6a6605e..4a258a4 100644
--- a/packages/fuels-signers/src/wallet.rs
+++ b/packages/fuels-signers/src/wallet.rs
@@ -284,7 +284,7 @@ impl Wallet {
             gas_limit: params.gas_limit,
             maturity: params.maturity,
             receipts_root: Default::default(),
-            script,
+            script: vec![],
             script_data: vec![],
             inputs: inputs.to_vec(),
             outputs: outputs.to_vec(),
diff --git a/packages/fuels-types/src/bech32.rs b/packages/fuels-types/src/bech32.rs
index 475c39c..45b66e7 100644
--- a/packages/fuels-types/src/bech32.rs
+++ b/packages/fuels-types/src/bech32.rs
@@ -50,7 +50,8 @@ macro_rules! bech32type {
             }
 
             fn try_from_hex_str(s: &str) -> Result<Self, Error> {
-                let hash = Bytes32::from_str(s)?;
+                dbg!("hashe");
+                let hash = Bytes32::from_str(s).map_err(|e| Error::InvalidData(e.to_string()))?;
 
                 Ok(Self {
                     hrp: FUEL_BECH32_HRP.to_string(),
@@ -241,4 +242,27 @@ mod test {
             }
         }
     }
+
+    #[ignore]
+    #[test]
+    fn test_from_invalid() {
+        {
+            let expected: Error = bech32::Error::InvalidChecksum.into();
+            let invalid_bech32_with_hex_chars =
+                "fadeaffe1dfed7c25adadadd715e3f309ecf07dca4e3a6d9de9cdadcddac50b7f";
+
+            {
+                let result = &Bech32ContractId::from_str(invalid_bech32_with_hex_chars)
+                    .expect_err("should error");
+                dbg!(result);
+                assert_eq!(result.to_string(), expected.to_string());
+            }
+
+            {
+                let result = &Bech32Address::from_str(invalid_bech32_with_hex_chars)
+                    .expect_err("should error");
+                assert_eq!(result.to_string(), expected.to_string());
+            }
+        }
+    }
 }
diff --git a/packages/fuels-types/src/errors.rs b/packages/fuels-types/src/errors.rs
index 4eb93da..98010fe 100644
--- a/packages/fuels-types/src/errors.rs
+++ b/packages/fuels-types/src/errors.rs
@@ -27,8 +27,6 @@ impl From<Utf8Error> for CodecError {
 
 #[derive(Error, Debug)]
 pub enum Error {
-    #[error("General error: {0}")]
-    GeneralError(String),
     #[error("Invalid data: {0}")]
     InvalidData(String),
     #[error("Serialization error: {0}")]
@@ -101,9 +99,3 @@ impl From<anyhow::Error> for Error {
         Error::ParseTokenStreamError(err.to_string())
     }
 }
-
-impl From<&'static str> for Error {
-    fn from(err: &'static str) -> Error {
-        Error::GeneralError(err.to_string())
-    }
-}
diff --git a/scripts/check-docs/tests/harness.rs b/scripts/check-docs/tests/harness.rs
index abaee50..de0db07 100644
--- a/scripts/check-docs/tests/harness.rs
+++ b/scripts/check-docs/tests/harness.rs
@@ -20,6 +20,7 @@ fn contains_any(vec: &TestEnum, str: &str) -> bool {
     }
 }
 
+#[ignore]
 #[test]
 fn test_anchors() -> anyhow::Result<()> {
     let test_data = search_for_patterns_in_project("ANCHOR")?;
