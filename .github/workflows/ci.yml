name: CI

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  DASEL_VERSION: https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64
  RUSTFLAGS: "-D warnings"
  FUEL_CORE_VERSION: 0.17.0
  RUST_VERSION: 1.67.0
  FORC_VERSION: 0.35.0
  FORC_PATCH_BRANCH: ""
  FORC_PATCH_REVISION: ""

jobs:
  setup-test-projects:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
        # selecting a toolchain either by action or manual `rustup` calls should happen
        # before the cache plugin, as it uses the current rustc version as its cache key
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust"

      - name: Set git config
        run: |
          git config --global core.bigfilethreshold 100m

      - name: Install forc and forc-fmt
        run: |
          if [[ -n $FORC_PATCH_BRANCH ]]; then
            cargo install --locked forc forc-fmt --git https://github.com/FuelLabs/sway --branch $FORC_PATCH_BRANCH
          elif [[ -n $FORC_PATCH_BRANCH ]]; then
            cargo install --locked forc forc-fmt --git https://github.com/FuelLabs/sway --rev $FORC_PATCH_REVISION
          else
            curl -sSLf https://github.com/FuelLabs/sway/releases/download/v${{ env.FORC_VERSION }}/forc-binaries-linux_amd64.tar.gz -L -o forc.tar.gz
            tar -xvf forc.tar.gz
            chmod +x forc-binaries/forc
            mv forc-binaries/forc /usr/local/bin/forc
            mv forc-binaries/forc-fmt /usr/local/bin/forc-fmt
          fi

      - name: Build Sway test projects
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin test-projects -- build

      - name: Check format of Sway test projects
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin test-projects -- format --check

      - uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: sway-examples
          # cache only the sway build artifacts, skip all src files
          path: |
            packages/fuels/tests
            !packages/fuels/tests/*.rs
            !packages/fuels/tests/**/*.rs
            !packages/fuels/tests/**/*.sw
            !packages/fuels/tests/**/Forc.toml
            !packages/fuels/tests/**/Forc.lock
            !packages/fuels/tests/.gitignore

  get-workspace-members:
    runs-on: ubuntu-latest
    outputs:
      members: ${{ steps.set-members.outputs.members }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - id: set-members
        run: |
          # install dasel
          curl -sSLf "$DASEL_VERSION" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          members=$(cat Cargo.toml | dasel -r toml -w json 'workspace.members' | jq -r ".[]" | xargs -I '{}' dasel -f {}/Cargo.toml 'package.name' | jq -R '[.]' | jq -s -c 'add')
          echo "members=$members" >> $GITHUB_OUTPUT

  verify-rust-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Ensure CI is using the same minimum toolchain specified in fuels Cargo.toml
      - run: |
          curl -sSLf "$DASEL_VERSION" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          MIN_VERSION=$(cat Cargo.toml | dasel -r toml 'workspace.package.rust-version')
          RUST_VERSION="${{ env.RUST_VERSION }}"
          echo "Comparing minimum supported toolchain ($MIN_VERSION) with ci toolchain (RUST_VERSION)"
          test "$MIN_VERSION" == "$RUST_VERSION"

  cargo-verifications:
    needs:
      - setup-test-projects
      - verify-rust-version
      - get-workspace-members
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command: [check]
        args: [--all-features]
        package: ${{fromJSON(needs.get-workspace-members.outputs.members)}}
        include:
          - command: fmt
            args: --all --verbose -- --check
          - command: clippy
            args: --all-targets --all-features
          - command: test
            args: --all-targets --all-features
          - command: test
            args: --all-targets
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy,rustfmt

        # selecting a toolchain either by action or manual `rustup` calls should happen
        # before the cache plugin, as it uses the current rustc version as its cache key
      - uses: Swatinem/rust-cache@v2.0.1
        continue-on-error: true
        with:
          key: "${{ matrix.command }} ${{ matrix.args }} ${{ matrix.package }}"

      - name: Add WASM target
        if: ${{ matrix.command == 'test' }}
        run: rustup target add wasm32-unknown-unknown

      - name: Install WebAssembly Test harness
        if: ${{ matrix.command == 'test' }}
        uses: baptiste0928/cargo-install@v1
        with:
          crate: webassembly-test-runner
          cache-key: "${{ matrix.command }} ${{ matrix.args }} ${{ matrix.package }}"

      # TODO: Enable WASM tests
      # - name: Test WASM package
      #   if: ${{ matrix.command == 'test' }}
      #   run: |
      #     cd packages/wasm-tests
      #     cargo test --target wasm32-unknown-unknown --all-targets --all-features
      #     cargo test --target wasm32-unknown-unknown --all-targets --no-default-features

      - name: Install Fuel Core
        if: ${{ matrix.command == 'test' }}
        run: |
          curl -sSLf https://github.com/FuelLabs/fuel-core/releases/download/v${{ env.FUEL_CORE_VERSION }}/fuel-core-${{ env.FUEL_CORE_VERSION }}-x86_64-unknown-linux-gnu.tar.gz -L -o fuel-core.tar.gz
          tar -xvf fuel-core.tar.gz
          chmod +x fuel-core-${{ env.FUEL_CORE_VERSION }}-x86_64-unknown-linux-gnu/fuel-core
          mv fuel-core-${{ env.FUEL_CORE_VERSION }}-x86_64-unknown-linux-gnu/fuel-core /usr/local/bin/fuel-core

      - name: Download sway example artifacts
        if: ${{ matrix.command == 'test' || matrix.command == 'clippy' }}
        uses: actions/download-artifact@v3
        with:
          name: sway-examples
          path: packages/fuels/tests/

      - name: Cargo (workspace-level)
        if: ${{ !matrix.package }}
        run: cargo ${{ matrix.command }} ${{ matrix.args }}

      - name: Cargo (package-level)
        if: ${{ matrix.package }}
        run: cargo ${{ matrix.command }} -p ${{ matrix.package }} ${{ matrix.args }}

      - name: Check Docs. Validity
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: --bin check-docs

      - name: Check Docs. Warnings
        run: |
          ! cargo doc |& grep -q "broken_intra_doc_links"

  # Ensure workspace is publishable
  publish-crates-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Publish crate check
        uses: katyo/publish-crates@v2
        with:
          dry-run: true
          no-verify: true

  publish:
    needs:
      - cargo-verifications
      - publish-crates-check
    # Only do this job if publishing a release
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Verify tag version
        run: |
          curl -sSLf "$DASEL_VERSION" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} Cargo.toml
      - name: Publish crate
        uses: katyo/publish-crates@v2
        with:
          publish-delay: 30000
          no-verify: true
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
